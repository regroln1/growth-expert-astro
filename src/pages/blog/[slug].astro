---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { formatDate, getReadingTime, generateTableOfContents } from '../../utils/blog';
import type { PostPageProps, BlogPost } from '../../types';

// ✅ Déclare getStaticPaths avec typage
export async function getStaticPaths() {
  const posts: BlogPost[] = await getCollection('blog');
  return posts.map((post: BlogPost) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// ✅ Props avec typage strict
const { post } = Astro.props as PostPageProps;
const { Content } = await post.render();

const readingTime = getReadingTime(post.body);
const toc = generateTableOfContents(post.body);
---



<Layout 
  title={`${post.data.title} - Growth Expert`}
  description={post.data.description}
>
  <!-- ✅ Meta tags SEO & Social -->
  <meta property="og:title" content={post.data.title} slot="head" />
  <meta property="og:description" content={post.data.description} slot="head" />
  <meta property="og:type" content="article" slot="head" />
  <meta property="og:url" content={`${Astro.site}blog/${post.slug}`} slot="head" />
  {post.data.image && <meta property="og:image" content={post.data.image} slot="head" />}
  
  <meta name="twitter:card" content="summary_large_image" slot="head" />
  <meta name="twitter:title" content={post.data.title} slot="head" />
  <meta name="twitter:description" content={post.data.description} slot="head" />
  {post.data.image && <meta name="twitter:image" content={post.data.image} slot="head" />}
  
  <meta property="article:published_time" content={post.data.pubDate.toISOString()} slot="head" />
  <meta property="article:author" content={post.data.author} slot="head" />
  {post.data.tags.map((tag: string) => (
    <meta property="article:tag" content={tag} slot="head" />
  ))}

  <Header />
  
  <main class="pt-20">
    <!-- ✅ Hero Section -->
    <section class="py-12 lg:py-20 relative overflow-hidden bg-gradient-to-br from-gray-50 via-white to-blue-50">
      <!-- Background shapes -->
      <div class="absolute top-20 left-10 w-64 h-64 bg-blue-500/5 rounded-full blur-3xl float-slow"></div>
      <div class="absolute bottom-20 right-10 w-80 h-80 bg-purple-500/5 rounded-full blur-3xl float-medium"></div>

      <div class="relative z-10 container mx-auto px-6">
        <div class="max-w-4xl mx-auto">
          <!-- ✅ Breadcrumb -->
          <nav class="mb-8 animate-fade-in">
            <ol class="flex items-center space-x-2 text-sm text-gray-500">
              <li><a href="/" class="hover:text-blue-600 transition-colors">Accueil</a></li>
              <li><span class="mx-2">/</span></li>
              <li><a href="/blog" class="hover:text-blue-600 transition-colors">Blog</a></li>
              <li><span class="mx-2">/</span></li>
              <li class="text-gray-700 truncate">{post.data.title}</li>
            </ol>
          </nav>

          <!-- ✅ Article Header -->
          <header class="text-center mb-12 animate-fade-in" style="animation-delay: 0.1s;">
            <!-- Tags -->
            <div class="flex flex-wrap justify-center gap-2 mb-6">
              {post.data.tags.map((tag: string) => (
                <span class="px-4 py-2 bg-blue-100 text-blue-700 text-sm font-medium rounded-full">
                  {tag}
                </span>
              ))}
            </div>

            <!-- Title -->
            <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-navy-900 mb-6 font-crimson leading-tight">
              {post.data.title}
            </h1>

            <!-- Meta Info -->
            <div class="flex flex-col sm:flex-row items-center justify-center gap-6 text-gray-600 mb-8">
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <span class="font-crimson">Par {post.data.author}</span>
              </div>
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <span class="font-crimson">{formatDate(post.data.pubDate)}</span>
              </div>
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="font-crimson">{readingTime} min de lecture</span>
              </div>
            </div>

            <!-- Featured Image -->
            {post.data.image && (
              <div class="mb-8 animate-fade-in" style="animation-delay: 0.2s;">
                <img 
                  src={post.data.image} 
                  alt={post.data.title}
                  class="w-full h-64 lg:h-96 object-cover rounded-2xl shadow-lg"
                />
              </div>
            )}
          </header>
        </div>
      </div>
    </section>

    <!-- ✅ Main Content with TOC -->
    <section class="py-12 lg:py-20">
      <div class="container mx-auto px-6">
        <div class="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-4 gap-12">
          
          <!-- ✅ Table of Contents -->
          <aside class="lg:col-span-1 order-2 lg:order-1">
            <div class="sticky top-24">
              {toc.length > 0 && (
                <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
                  <h3 class="text-lg font-bold text-navy-900 mb-4 font-crimson">
                    Table des matières
                  </h3>
                  <nav class="toc">
                    <ul class="space-y-2">
                      {toc.map((item) => (
                        <li class={`toc-level-${item.level}`}>
                          <a 
                            href={`#${item.id}`}
                            class="block text-sm text-gray-600 hover:text-blue-600 transition-colors py-1 font-crimson"
                            style={`padding-left: ${(item.level - 1) * 12}px`}
                          >
                            {item.text}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </nav>
                </div>
              )}
            </div>
          </aside>

          <!-- ✅ Article Content -->
          <article class="lg:col-span-3 order-1 lg:order-2">
            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-8 lg:p-12 prose prose-lg max-w-none">
              <Content />
            </div>
          </article>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>
